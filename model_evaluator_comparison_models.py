import os
from joblib import load
from feature_matching_generator_ML_comparison_models import feature_matcher_wrapper_generic_comparison_model
from database import COLMAPDatabase
import numpy as np
from ransac_prosac import ransac
from benchmark import benchmark
import sys
from query_image import read_images_binary, load_images_from_text_file, get_localised_image_by_names, get_query_images_pose_from_images, get_intrinsics_from_camera_bin

# Read the original file model_evaluator.py for notes.
# Similarly to model_evaluator.py, run in sequence NOT parallel
# This file was added to evaluate Predicting Matchability - PM (2014) paper,
# Match or No Match: Keypoint Filtering based on Matching Probability - MoNM (2020) paper, a vanillia RF - vl_rf
# In this file I get the matches then benchmark, and repeat not like in model_evaluator.py where I get all matches then benchmark

base_path = sys.argv[1]
print("Base path: " + base_path)

ml_path = os.path.join(base_path, "ML_data")
prepared_data_path = os.path.join(ml_path, "prepared_data")

comparison_data_path_PM = os.path.join(base_path, "predicting_matchability_comparison_data")
comparison_data_path_MoNM = os.path.join(base_path, "match_or_no_match_comparison_data")
comparison_data_path_vl_rf = os.path.join(base_path, "ml_models_vanillia_comparison_data")

print("Loading Data..")
db_gt_path = os.path.join(base_path, "gt/database.db")
db_gt = COLMAPDatabase.connect(db_gt_path)  # you need this database to get the query images descs as they do NOT exist in the LIVE db, only in GT db!

# the "gt" here means ground truth (also used as query)
query_images_bin_path = os.path.join(base_path, "gt/model/images.bin")
query_images_path = os.path.join(base_path, "gt/query_name.txt")
query_cameras_bin_path = os.path.join(base_path, "gt/model/cameras.bin")
query_images = read_images_binary(query_images_bin_path)
query_images_names = load_images_from_text_file(query_images_path)
# "avg_descs_xyz_ml.npy" is generated by "get_points_3D_mean_desc_single_model_ml.py"
points3D_info = np.load(os.path.join(ml_path, "avg_descs_xyz_ml.npy")).astype(np.float32)
train_descriptors_live = points3D_info[:, 0:128]
localised_query_images_names = get_localised_image_by_names(query_images_names, query_images_bin_path)
points3D_xyz_live = points3D_info[:,128:132]
K = get_intrinsics_from_camera_bin(query_cameras_bin_path, 3)  # 3 because 1 -base, 2 -live, 3 -query images

# evaluation starts here
print("Feature matching using models..")
# db_gt, again because we need the descs from the query images
ratio_test_val = 1  # 0.9 as previous publication, 1.0 to test all features (no ratio test)

print("Creating dirs for comparison model..")
os.makedirs(comparison_data_path_PM, exist_ok=True)
os.makedirs(comparison_data_path_MoNM, exist_ok=True)
os.makedirs(comparison_data_path_vl_rf, exist_ok=True)

benchmarks_iters = 1
print("benchmarks_iters set to: " + str(benchmarks_iters))

# NOTE: "model" needs to have a predict method and return predictions 0 and 1, not 0.5 or 0.12 or whatever

# print("Getting matches using Predicting Matchability (2014) + loading model..")
# model_path = os.path.join(comparison_data_path_PM, "rf_model_PM.joblib")
# model = load(model_path)
# matches, images_matching_time, images_percentage_reduction = feature_matcher_wrapper_generic_comparison_model(base_path, comparison_data_path_PM, model, db_gt, localised_query_images_names, train_descriptors_live, points3D_xyz_live, ratio_test_val)
# np.save(os.path.join(comparison_data_path_PM, "images_matching_time.npy"), images_matching_time)
# np.save(os.path.join(comparison_data_path_PM, "images_percentage_reduction.npy"), images_percentage_reduction)
#
# print(" RANSAC..")
# est_poses_results = benchmark(benchmarks_iters, ransac, matches, localised_query_images_names, K)
# np.save(os.path.join(comparison_data_path_PM, "est_poses_results.npy"), est_poses_results)

# ----------------------------->

print("Getting matches using Match or No Match: Keypoint Filtering based on Matching Probability + loading model..")
model_path = os.path.join(comparison_data_path_MoNM, "rf_match_no_match_sk.joblib")
model = load(model_path)
matches, images_matching_time, images_percentage_reduction = feature_matcher_wrapper_generic_comparison_model(base_path, comparison_data_path_MoNM, model, db_gt, localised_query_images_names, train_descriptors_live, points3D_xyz_live, ratio_test_val, model_type="MatchNoMatch")
np.save(os.path.join(comparison_data_path_MoNM, "images_matching_time.npy"), images_matching_time)
np.save(os.path.join(comparison_data_path_MoNM, "images_percentage_reduction.npy"), images_percentage_reduction)

print(" RANSAC..")
est_poses_results = benchmark(benchmarks_iters, ransac, matches, localised_query_images_names, K)
np.save(os.path.join(comparison_data_path_MoNM, "est_poses_results.npy"), est_poses_results)

# ----------------------------->

# print("Getting matches using vanillia RF + loading model..")
# model_path = os.path.join(comparison_data_path_vl_rf, "rf_model_vanillia_25_25.joblib")
# model = load(model_path)
# matches, images_matching_time, images_percentage_reduction = feature_matcher_wrapper_generic_comparison_model(base_path, comparison_data_path_vl_rf, model, db_gt, localised_query_images_names, train_descriptors_live, points3D_xyz_live, ratio_test_val)
# np.save(os.path.join(comparison_data_path_vl_rf, "images_matching_time.npy"), images_matching_time)
# np.save(os.path.join(comparison_data_path_vl_rf, "images_percentage_reduction.npy"), images_percentage_reduction)
#
# print(" RANSAC..")
# est_poses_results = benchmark(benchmarks_iters, ransac, matches, localised_query_images_names, K)
# np.save(os.path.join(comparison_data_path_vl_rf, "est_poses_results.npy"), est_poses_results)

# ----------------------------->

print("Done!")