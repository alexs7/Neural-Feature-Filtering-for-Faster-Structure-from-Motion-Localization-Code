# This script will load the "ground_truth_from_cpp_tool" folder data.
# The data in that folder was generated by "create_gt_data_for_match_no_match.py"
# This script also run the C++ test tool and generates predictions that will be used to show them on images for visual debugging.
# and images to put in your thesis.
# NOTE: 23/11/2022 Do not use this to test on the GT generated by the tool. Use test_all_models_on_3D_gt_data.py instead.

# import csv
# import os
# import shutil
# import subprocess
# import sys
# import numpy as np
# from sklearn.metrics import classification_report, precision_recall_fscore_support, confusion_matrix
# from tqdm import tqdm
# import cv2
# from database import COLMAPDatabase
# from query_image import clear_folder, load_images_from_text_file, get_keypoints_xy, get_image_id, get_image_name_only
# from save_2D_points import save_debug_image, save_debug_image_simple
#
# def load_positive_predicted_result_xy(filename):
#     predicted_result = []
#     data_read = [row for row in csv.reader(open(filename, 'r'), delimiter=',') if len(row) > 0]
#     for data_row in data_read:
#         predicted_result.append(np.array(data_row).astype(np.float32))
#     predicted_result = np.array(predicted_result).reshape([len(predicted_result), 6])
#     return predicted_result[:,0:2]
#
# def load_gt(path):
#     test_data = []
#     for filename in tqdm(os.listdir(path)):
#         f = os.path.join(path, filename)
#         if os.path.isfile(f):
#             data_read = [row for row in csv.reader(open(f, 'r'), delimiter=',') if len(row) > 0]
#             for data_row in data_read:
#                 test_data.append(np.array(data_row).astype(np.float32))
#     return np.array(test_data).reshape([len(test_data),9])
#
# def runTrainedModelForMatchNoMatchMatchabilityComparison(base_path, mnm_base_path, debug_images_path, pairs_limit, gt_images_path, mnm_base_code_dir):
#     # clear folders
#     images_for_original_code = os.path.join(mnm_base_code_dir, "Training images")  # same name as in MnM code base main.cpp
#     clear_folder(images_for_original_code)
#     # from the original code "Training Data" will contain the data after the pre-training stage
#     # Each time you run the original pre-training (C++) you have to empty the "Training Data" folder, done here
#     training_data_csv_for_original_code = os.path.join(mnm_base_code_dir, "Training Data")
#     clear_folder(training_data_csv_for_original_code)
#     # This will contain Ground Truth data generated from the C++ pretraining tool. SAme number of images as in "Training images"
#     ground_truth_data_from_original_code = os.path.join(mnm_base_code_dir, "Ground Truth")
#     clear_folder(ground_truth_data_from_original_code)
#     # clear test images
#     test_images_for_original_code = os.path.join(mnm_base_code_dir, "Test Images")
#     clear_folder(test_images_for_original_code)
#     # clear test images previous result
#     clear_folder(os.path.join(mnm_base_code_dir, "Results/PredictedLabelsAll"))
#     clear_folder(os.path.join(mnm_base_code_dir, "Results/PredictedMatchableKeypoints"))
#
#     query_images_path = os.path.join(base_path, "gt/query_name.txt")  # these are the same anw, as mnm
#     query_images_names = load_images_from_text_file(query_images_path)
#
#     # copy images to test folder
#     for name in query_images_names:
#         name = name.split("/")[1]
#         shutil.copyfile(os.path.join(gt_images_path, name), os.path.join(test_images_for_original_code, name))
#
#     matchornomatch_test = ["./matchornomatch_test"]
#     subprocess.check_call(matchornomatch_test, cwd=mnm_base_code_dir)
#
#     # at this point you have generated predictions
#     # draw the predicted data on the images and copy them to the appropriate folder
#     gt_db_mnm_path = os.path.join(mnm_base_path, "gt/database.db")
#     gt_db_mnm = COLMAPDatabase.connect(gt_db_mnm_path)
#     for name in tqdm(query_images_names):
#         original_keypoints_xy = get_keypoints_xy(gt_db_mnm, get_image_id(gt_db_mnm, name))
#         predicted_keypoints_xy = \
#             load_positive_predicted_result_xy(os.path.join(mnm_base_code_dir, f"Results/PredictedMatchableKeypoints/PredictedMatchableKeypoints_{get_image_name_only(name)}"))
#         original_image_path = os.path.join(gt_images_path, f"{get_image_name_only(name)}.jpg")
#         output_filename = f"{get_image_name_only(name)}_{pairs_limit}.jpg"
#         save_debug_image_simple(original_image_path, original_keypoints_xy, predicted_keypoints_xy, debug_images_path, output_filename)
#
#     pass
#
# base_path = sys.argv[1]
# print("Base path: " + base_path)
# mnm_base_path = sys.argv[2] # this is that data generated from format_data_for_match_no_match.py
# gt_images_path = sys.argv[3] #i.e. colmap_data/CMU_data/slice3/gt/images/session_7
# mnm_base_code_dir = "code_to_compare/Match-or-no-match-Keypoint-filtering-based-on-matching-probability/build/"
#
# data_path = os.path.join(base_path, "match_or_no_match_comparison_data/")
# ground_truth_from_cpp_tool_path = os.path.join(data_path, "ground_truth_from_cpp_tool")
#
# print("Loading GT data:")
# test_data = load_gt(ground_truth_from_cpp_tool_path)
#
# X_test = test_data[:,0:8]
# y_true = test_data[:,8].astype(np.uint8) #or y_test
#
# print("Clearing previous debug images first..")
# debug_images_path = os.path.join(data_path, f"debug_images")
# clear_folder(debug_images_path)
#
# for arg in sys.argv[4:]: #just use whatever index number the pairs_limit argument start at
#     no_samples = int(arg)
#     cpp_original_model = cv2.ml.RTrees_load(os.path.join(data_path, f"Trained model {arg}.xml"))
#     _, y_pred = cpp_original_model.predict(X_test)
#
#     print(f"Report for model trained on {arg} samples")
#     print("Classification_report")
#     print(classification_report(y_true, y_pred, labels=[0, 1]))
#     print("Precision_recall_fscore_support")
#     print(precision_recall_fscore_support(y_true, y_pred, labels=[0, 1]))
#     print("Confusion_matrix")
#     print(confusion_matrix(y_true, y_pred))
#
#     print(f"Running c++ original tool and generating debug images for model: Trained model {arg}.xml")
#     runTrainedModelForMatchNoMatchMatchabilityComparison(base_path, mnm_base_path, debug_images_path, arg, gt_images_path, mnm_base_code_dir)
#
# print("Done!")